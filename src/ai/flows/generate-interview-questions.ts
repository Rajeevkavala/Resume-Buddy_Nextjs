// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates role-specific interview questions and answers using AI based on a resume and job description.
 *
 * - generateInterviewQuestions - A function that generates interview questions and answers.
 * - GenerateInterviewQuestionsInput - The input type for the generateInterviewQuestions function.
 * - GenerateInterviewQuestionsOutput - The return type for the generateInterviewQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateInterviewQuestionsInputSchema = z.object({
  resumeText: z
    .string()
    .describe('The text extracted from the resume.'),
  jobDescription: z.string().describe('The job description for the role.'),
  numQuestions: z
    .number()
    .default(5)
    .describe('The number of interview questions to generate.'),
});

export type GenerateInterviewQuestionsInput = z.infer<
  typeof GenerateInterviewQuestionsInputSchema
>;

const GenerateInterviewQuestionsOutputSchema = z.object({
  questionsAndAnswers: z.array(
    z.object({
      question: z.string().describe('The interview question.'),
      answer: z.string().describe('Suggested answer to the question.'),
    })
  ),
});

export type GenerateInterviewQuestionsOutput = z.infer<
  typeof GenerateInterviewQuestionsOutputSchema
>;

export async function generateInterviewQuestions(
  input: GenerateInterviewQuestionsInput
): Promise<GenerateInterviewQuestionsOutput> {
  return generateInterviewQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateInterviewQuestionsPrompt',
  input: {schema: GenerateInterviewQuestionsInputSchema},
  output: {schema: GenerateInterviewQuestionsOutputSchema},
  prompt: `You are an AI-powered interview preparation tool. You are given a resume and a job description. Your task is to generate a list of interview questions and suggested answers that are relevant to the role.

Resume:
{{resumeText}}

Job Description:
{{jobDescription}}

Number of Questions: {{numQuestions}}

Format your output as a JSON array of objects. Each object should have a 'question' field and an 'answer' field.
`,
});

const generateInterviewQuestionsFlow = ai.defineFlow(
  {
    name: 'generateInterviewQuestionsFlow',
    inputSchema: GenerateInterviewQuestionsInputSchema,
    outputSchema: GenerateInterviewQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
